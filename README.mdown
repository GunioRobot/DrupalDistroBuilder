# Using DrupalDistroBuilder

You can build your own distribution of Drupal -- complete with all the themes and modules you want -- in two minutes. No lie.

DrupalDistroBuilder (DDB) is a simple tool for creating customized installation packages of Drupal. DDB does the following:

- It downloads the latest version of Drupal automatically.
- Based on your configuration, it retrieves all your preferred modules and themes.
- It adds your preferred modules and themes to the Drupal package
- It removes any modules and themes that you DON'T want.

At the end of the process, you are left with a shiny new archive (named drupal-VERSION-DATE-TIME.tgz) that has everything you want.

From there, all you need to do is install the new package, following the same installation procedure as always.

## Installation

To install DDB, you need to do the following:

1. Install Phing.

    $ pear channel-discover pear.phing.info
    $ pear install phing/phing

Find out more at http://phing.info/trac/wiki/Users/Download

2. Download the DDB package.

3. Untar the DDB package into the desired location.

    $ tar -zxvf ddb-VERSION.tgz

Remember, DDB does not depend on Drupal at all, and does not use a web server either. It can be installed anywhere on your system, though it is probably a good idea to not install it into your webroot where others could see it.

## Using DDB

There are two steps to building a custom Drupal distro with DDB:

1. Edit drupal.properties.
2. Run the Phing command from the same directory that has build.xml:

    $ phing

That's all there is to it. At the end of Phing's build, you will have a Drupal package with a name that looks something like this:

    drupal-6.14-20091114-1653.tgz

That file will contain Drupal and all of the modules and themes you selected. If you chose to remove modules from core, they will not be included in that tar file.

From there, follow the standard Drupal installation instructions to proceed: http://drupal.org/getting-started/install

### drupal.properties 

As of this writing, there are only four properties to configure:

    # Modules you want.
    drupal.modules=views,cck
    
Set this to a comma-separated list of modules that should be downloaded and installed. Modules must reside on Drupal.org in order to be automatically downloaded. (If you need another repository, you will have to do some minor coding to add support for your repository.)

NOTE: Phing treats whitespace as significant, so there must be NO WHITESPACE between module names. The same goes for all items in this file.

    # Themes you want.
    drupal.themes=zen

Set this to a comma-separated list of themes that should be downloaded and installed.

    # Modules to remove from core
    #drupal.exclude.modules=blog,forum,aggregator,blogapi,book,ping,poll,upload
    drupal.exclude.modules=
    
Set this to a comma-separated list of modules that should be explicitly excluded from the distribution. For obvious reasons, this only removes modules that are in core.

    # Themes to remove from core
    drupal.exclude.themes=bluemarine,marvin,pushbutton,chameleon
    
Set this to a comma-separated list of themes that should be excluded from the distribution. This will remove core themes from the package.

That's all there is to the configuration file.

## Can DDB Be Configured To...?

DDB is highly configurable, and is not intended to be a one-size-fits-all solution. In fact, it was built on top of Phing precisely for that reason. To modify the way the package builder works, simply make a backup copy of build.xml, and then hack away at build.xml. The Phing project is fully documented: http://phing.info/

A few things you can easily make Phing do to Drupal:

* Move files and directories around. For example, by default DDB stores all modules in sites/default/all/modules (which will interoperate well with Drush). You can easily change this in Phing, though.
* Dynamically replace strings. Yes, you can programmatically remote "Blue Smurf" from the search page.
* Programmatically patch core or modules.
* Create a default settings.php file, complete with preconfigured database connections. In fact, you can even PRE-CREATE the database from within the build.xml script. See http://phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#PDOSQLExecTask
* Create a custom installation profile on the fly. This takes a little bit of work and perhaps some dynamic code generation, but it is certainly possible.
* Migrate existing Drupal databases. See http://phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#DbDeployTask
* Integrate with your own SVN repository. Other VCSs might be supported by third-party Phing tools. See the Svn* tasks at http://phing.info/docs/guide/stable/
* Download other third-party libraries like TinyMCE or Google Analytics. This may require minor PHP coding, but the tasks included with DDB show how it is done.
* With a little bit of creativity, one could even configure Phing to actually run the Drupal installation routines. This would require a healthy dose of PHP code, though.

Phing provides a powerful declarative XML-based language that happens to be particularly good at file system work. A look through the Phing manual may give you lots of other ideas for extensions to this system.

## Why Doesn't DDB Use A Custom Install Profile

While this system could directly interact with the Drupal installer (creating, for example, a custom install profile), it does not do so by default. Why? Because interaction is not necessary.

## Why Didn't You Just Use Drush?

Drush requires Drupal in order to run. For that reason, Drush cannot perform the same task that DDB was built to accomplish.

DDB was built to be compatible with Drush. You should be able to build a distribution that includes Drush, and then use Drush once Drupal is installed.

## Why Is This LGPL Instead of GPL?

DrupalDistroBuilder is LGPL in order to avoid any confusion where it is asserted that adding additional tasks requires those tasks to be released under the GPL. Only the custom PHP code in src/lib/* is considered to be licensable code anyway. 

This system is designed to be extended, and designed to be used for cases where proprietary business logic may be required. For that reason, we do not view a GPL release to be desirable.

All code that comes as part of Phing is subject to Phing's own licensing terms.

### Build.xml and drupal.properties are not under LGPL
build.xml is considered to be a configuration file IN THE PUBLIC DOMAIN, the contents of which are not subject to the source code license. drupal.properties is also a configuration file, and is also IN THE PUBLIC DOMAIN.

## Why Is This Code Not In Drupal's CVS?

Two reasons:

1. Because there is no place in Drupal's CVS for such projects. This is not a theme, module, or translation. The current Project configuration does not allow for anything else.
2. Because this project is not released under the GPL, which is viewed as too restrictive for DrupalDistroBuilder.

## Authors

DrupalDistroBuilder was written by Matt Butcher (matt@aleph-null.tv). It relies heavily on Phing (http://phing.info).